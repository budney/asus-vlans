#!/bin/sh
#
# Firewall rules for guest VLANs on bridge br1
#

# Set parameters here:
LAN_IFACE=br0       ; # This should match the original network bridge interface
WILDCARD_IFACE=br+  ; # This should match all the new VLAN bridge interfaces

# Get a list of all chains that mention $LAN_IFACE
CHAINS=`iptables -S | egrep $LAN_IFACE | awk '{print $2}' | sort -u`

create_chains()
{
    IFACE=$1

    # Rewrite the rule that prevents leakage of stray packets to the WAN
    iptables -D FORWARD ! -i $LAN_IFACE -o eth0 -j other2wan
    iptables -I FORWARD ! -i $WILDCARD_IFACE -o eth0 -j other2wan

    # Step through the chains, creating a similar chain for each guest network
    for CHAIN in $CHAINS
    do
        # Remove the reference to the chain
        iptables -D $CHAIN -i $IFACE -j $IFACE-$CHAIN

        # Flush, delete, and recreate the chain
        iptables -F $IFACE-$CHAIN
        iptables -X $IFACE-$CHAIN
        iptables -N $IFACE-$CHAIN

        # Invoke the new chain from the old one
        iptables -I $CHAIN -i $IFACE -j $IFACE-$CHAIN

        # Clone all the rules for $LAN_IFACE into the new chain for $IFACE.
        iptables -S $CHAIN | egrep $LAN_IFACE | sed "s}$LAN_IFACE}$IFACE}g" | sed "s}$CHAIN}$IFACE-$CHAIN}g" | \
        while read rule
        do
            iptables $rule
        done
    done
}

add_isolation_rules()
{
    IFACE=$1
    GATEWAY=$2

    #----------------------------------------------------------
    # From here on down, rules are inserted at the top of the
    # chain, in order to run before any of the rules we copied
    # from the LAN interface. That means that these rules will
    # be checked in the reverse order than they're added below.
    #----------------------------------------------------------

    # Drop any new connections from guest wifi to the router,
    # but DO forward connection attempts to hosts other than the router.
    iptables -I $IFACE-INPUT -i $IFACE -m state --state NEW -d $GATEWAY -j DROP
    iptables -I $IFACE-FORWARD -i $IFACE -m state --state NEW -j ACCEPT

    # Block any connections between the guest and non-guest networks,
    # and between two different guest networks.
    iptables -I $IFACE-FORWARD -i $IFACE -o $WILDCARD_IFACE -m state --state NEW -j DROP
    iptables -I $IFACE-FORWARD -i $WILDCARD_IFACE -o $IFACE -m state --state NEW -j DROP
    iptables -I $IFACE-FORWARD -i $IFACE -o $IFACE -m state --state NEW -j ACCEPT

    # ...but allow guests to access DHCP
    iptables -I $IFACE-INPUT -i $IFACE -p udp --dport 67:68 --sport 67:68 -j ACCEPT

    # Also allow guests to access DNS
    iptables -I $IFACE-INPUT -i $IFACE -p udp --dport 53 -j ACCEPT
    iptables -I $IFACE-INPUT -i $IFACE -p tcp --dport 53 -j ACCEPT
}

#--------------------------------------------------------------
# The script proper begins here.
#--------------------------------------------------------------

# List all the bridge interfaces except $LAN_IFACE
BRIDGES=`ifconfig -a | sed 's/[ \t].*//;/^\([^b]\|.[^r]\|..0$\|$\)/d;'`

# Loop through all the bridges
for IFACE in $BRIDGES
do
    GATEWAY=`ifconfig $IFACE|sed '/inet addr/!d;s/^.*inet addr://;s/[ \t].*$//;'`

    # Create rule chains for this interface
    create_chains($IFACE)

    # Create the security rules for this interface and gateway
    add_security_rules($IFACE, $IP)
done

# That's it!
