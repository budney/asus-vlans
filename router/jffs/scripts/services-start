#!/bin/sh

# Important variables
ROUTER_PORT=5t
WAN_IFACE=eth0
DEFAULT_BRIDGE=br0
BRIDGE_IP=172.X.0.1   ; # <-- Put an X where you want the VLAN number
NETMASK=255.255.255.0

# get list of configured guest wireless networks
#
Guest24=`nvram get wl0_vifs`
Guest5=`nvram get wl1_vifs`

# Count the networks we've created for setting nvram parameters
counter=1

# Move all Guest wireless to br1
# attempt to move wireless guest fails (no security only works) until restart of eapd below
#
# Actually move the interfaces to the new bridge
for GuestWifiDevice in $Guest24 $Guest5
do
    # Figure out the VLAN number. wl0.1 becomes 101; wl1.2 becomes 112; etc.
    # The VLAN, bridge, and gateway IP all contain this number.
    N=`echo $GuestWifiDevice | sed 's/\.//; s/wl/1/;'`
    VLAN="vlan$N"
    BRIDGE="br$N"
    IP=`echo $BRIDGE_IP | sed "s/X/$N/"`

    # The lan counter is always sequential
    LAN="lan$i"
    i=$(( $i+1 ))

    # Create the VLAN
    robocfg vlan $N ports "$ROUTER_PORT"
    vconfig add $WAN_IFACE $N
    ifconfig $VLAN up

    # Create the bridge interface
    brctl addbr $BRIDGE
    brctl stp $BRIDGE on

    brctl delif $DEFAULT_BRIDGE $GuestWifiDevice
    brctl addif $BRIDGE $GuestWifiDevice

    # Activate the bridge interface
    ifconfig $BRIDGE $IP netmask $NETMASK up

    # Set nvram variables for the new network, 
    nvram set $LAN\_ifnames="$VLAN $GuestWifiDevice"
    nvram set $LAN\_ifname="$BRIDGE"
done

# If there were any guest networks, reset the nvram parameter for the original default network,
# and then restart eapd to fix handling of secured WiFi networks.
if [ "x$Guest24$Guest5" != "x" ]
then
    nvram set lan_ifnames=`nvram get $DEFAULT_BRIDGE\_ifnames | sed 's/wl[0-9]\.[0-9][ \t]*//g;'`
    nvram set lan_ifname="$DEFAULT_BRIDGE"

    nvram set $DEFAULT_BRIDGE\_ifnames=`nvram get lan_ifnames`

    # restart eapd
    killall eapd
    eapd
fi
